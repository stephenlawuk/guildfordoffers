== Config

    -logins
    admin pass
    user password
    if you accidently delete all users take :new off the before filter in users

    Required
    - Rails v3.0.5
    - Authlogic v2.1.6
    - Ym4r gem and plugin
    - rails plugin install git://github.com/ewildgoose/ym4r_gm.git
    - Will_paginate v3.0.pre2 (installed manually into netbeans via download at
        http://rubygems.org/gems/will_paginate/versions/3.0.pre2)
    - Mail server - config found in config>initializers>setup_mail.rb and also
      the environment folder needs a few action mailer lines setup.
    - Sqlite3 v3.7.3 (semi req, can be changed)
    - Netbeans v6.9.1 (netbeans project but can be worked into other forms)
    Optional
    - Nbgit v0.4
    - Msysgit v1.7.4
    - Sqlite Manager v0.6.8 (firefox addon)

== Version History

    - v0.0      First github upload of basic project containing post model
                and layout including header and various css
    - v0.1      Adding web, nus tickboxes and image url to form and database.
    - v0.2      Include image files for companies and move show, edit, destroy.
    - v0.3      Integrating twitter feed into header/banner.
    - v0.4      Netbeans generator hack to get it to work by putting generator
                in lib folder. Also some new images.
    - v0.4.1    Netbeans generator hack removal as it doesn't work and a update
                to new addthis code. Also IE and Chrome Fixes as they dont
                like overlaping divs.
    - v0.5      Load up authlogic to 2.1.6 to setup logins
    - v0.5.1    Setup users with authlogic, created database, user MVC's.
    - v0.5.2    Sessions created with authlogic and login/logout/register
                created (will remove register later)
    - v0.5.2.1  Some footer divs for use later in email submission for
                newsletter
    - v0.5.3    Before filters on posts actions implemented, cant create, edit 
                or delete unless logged in. View index and show can be seen by
                all.
    - v0.5.3.1  IE fix for return to top link which was cause display issue.
    - v0.6      Static pages implemented, shall come back to page access.
    - v0.6.1    RSS feed for posts implemented, available at /feed
                Google analytics javascript taken from current site.
                Addthis analytics enabled (live needs to change public id link
                found at for example #pubid=ra-4d9b75737cae2342)
    - v0.6.2    Print offer working but needs some formatting on the offers
    - v0.6.3    Pagination install and CSS fix on Addthis. Override on
                will_paginate method page_entries_info to change display found
                in config>initialisers. Redesign front page layout and added
                page rendering times.
    - v0.7      Email MVC introduced. Partial render using additional form in
                application layout. Also added basic email format validation.
    - v0.7.1    Welcome mail upon newsletter subscribe (doesnt send as no valid
                mail server). Also access rights on controllers are now setup.
    - v0.7.2    Control panel static page with restricted access.
                Cleaned up main application by splitting into partials
                RSS Feed Link put into header
                All except posts show view formatted and added content.
                Print image and a few docs added.
    - v0.7.3    Added image to RSS feed
                Formated posts views
                Added missing company images
                Added back nav to pages
    - v0.7.4    Installed ym4r plugin and gem, added maps with business loc.
                Dynamic error pages. Bad urls handled with a static 404
                offer show blank email fix
                FB share with modded javascript
    - v0.7.5    searchlogic trialed, settled on meta_search for now
                geocoder gem installed
                geocoder semi implemented with IP seems very dodgy though.
                search implemented and works from any page
    - v0.8      Favicon with a "G" added
                Adjusted username model for uniqueness on field
                Facebook comments
    - v0.9      Major graphics rework and reorganising of links, divs, styles
                Search bug fix
                Lots of new images
                Custom map icons
                More conditionals on offer view

== To Do List
    - improve search
    - map different icons
    - Show description html safe container?? and images for web exc etc
    - comments / reviews (FBML)
    - twitter speech bubble may need some graphics work
    - web exclusive and NUS card req images.
    - whats hot
    - cheap weak? maybe
    - split css up into different files as its a mess
    - dont show out of date vouchers
    - rating
    - more info on index offers javascript??
    - Search link via the tags?
    - printed count cant figure out currently

== Known Bugs/Issues

    -- Minor bug - custom icon reduces map zoom bar not sure on fix.
       possibly to do with initialisation order.
    -- Geocoder gem database is very inaccurate and should be replaced
       as soon as possible with Geokit when it becomes available. There is also
       a depreciation warning in the Geocoder implementation that canâ€™t be helped.
    -- Search is still at an early stage and only really handles a single keyword
       or exact phrase match.
    -- An invalid image URL in the database causes a routing error when that
       record tries to load. I was unable to work out how I could possibly
       validate this, the only way is to monitor the logs for any errors and
       correct the record if it happens.
    -- Deprecation warning on model/user.rb due to acts_as_authentic
        There are some patches by users but not by main author for now i have
        suppressed the warning as it is not a big deal.
    -- log_error(exception) in app controller doesnt appear to be working in
        development in rails 3 not sure about live.

== Description of Contents

The default directory structure of a generated Ruby on Rails application:

  |-- app
  |   |-- controllers
  |   |-- helpers
  |   |-- mailers
  |   |-- models
  |   `-- views
  |       `-- layouts
  |-- config
  |   |-- environments
  |   |-- initializers
  |   `-- locales
  |-- db
  |-- doc
  |-- lib
  |   `-- tasks
  |-- log
  |-- public
  |   |-- images
  |   |-- javascripts
  |   `-- stylesheets
  |-- script
  |-- test
  |   |-- fixtures
  |   |-- functional
  |   |-- integration
  |   |-- performance
  |   `-- unit
  |-- tmp
  |   |-- cache
  |   |-- pids
  |   |-- sessions
  |   `-- sockets
  `-- vendor
      `-- plugins

app
  Holds all the code that's specific to this particular application.

app/controllers
  Holds controllers that should be named like weblogs_controller.rb for
  automated URL mapping. All controllers should descend from
  ApplicationController which itself descends from ActionController::Base.

app/models
  Holds models that should be named like post.rb. Models descend from
  ActiveRecord::Base by default.

app/views
  Holds the template files for the view that should be named like
  weblogs/index.html.erb for the WeblogsController#index action. All views use
  eRuby syntax by default.

app/views/layouts
  Holds the template files for layouts to be used with views. This models the
  common header/footer method of wrapping views. In your views, define a layout
  using the <tt>layout :default</tt> and create a file named default.html.erb.
  Inside default.html.erb, call <% yield %> to render the view using this
  layout.

app/helpers
  Holds view helpers that should be named like weblogs_helper.rb. These are
  generated for you automatically when using generators for controllers.
  Helpers can be used to wrap functionality for your views into methods.

config
  Configuration files for the Rails environment, the routing map, the database,
  and other dependencies.

db
  Contains the database schema in schema.rb. db/migrate contains all the
  sequence of Migrations for your schema.

doc
  This directory is where your application documentation will be stored when
  generated using <tt>rake doc:app</tt>

lib
  Application specific libraries. Basically, any kind of custom code that
  doesn't belong under controllers, models, or helpers. This directory is in
  the load path.

public
  The directory available for the web server. Contains subdirectories for
  images, stylesheets, and javascripts. Also contains the dispatchers and the
  default HTML files. This should be set as the DOCUMENT_ROOT of your web
  server.

script
  Helper scripts for automation and generation.

test
  Unit and functional tests along with fixtures. When using the rails generate
  command, template test files will be generated for you and placed in this
  directory.

vendor
  External libraries that the application depends on. Also includes the plugins
  subdirectory. If the app has frozen rails, those gems also go here, under
  vendor/rails/. This directory is in the load path.
